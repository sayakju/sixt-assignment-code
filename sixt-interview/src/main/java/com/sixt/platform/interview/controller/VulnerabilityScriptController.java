package com.sixt.platform.interview.controller;

import com.sixt.platform.interview.model.ExecutionPlan;
import com.sixt.platform.interview.model.VulnerabilityScript;
import com.sixt.platform.interview.model.exception.ExecutionPlanException;
import com.sixt.platform.interview.service.VulnerabilityScriptService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
public class VulnerabilityScriptController {

    @Autowired
    private VulnerabilityScriptService vulnerabilityScriptService;

    /**
     * Add a new vulnerability script
     * @param vulnerabilityScript
     * @return
     */
    @RequestMapping(value = "/vulnerability-scripts", method = RequestMethod.POST,
            consumes = MediaType.APPLICATION_JSON_UTF8_VALUE, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ResponseEntity<VulnerabilityScript> addScript(@RequestBody VulnerabilityScript vulnerabilityScript) {
        return new ResponseEntity<>(vulnerabilityScriptService.addScript(vulnerabilityScript), HttpStatus.ACCEPTED);
    }

    /**
     * Get a list of current vulnerability scripts
     * @return
     */
    @RequestMapping(value = "/vulnerability-scripts", method = RequestMethod.GET,
            produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ResponseEntity<List<VulnerabilityScript>> getScripts() {
        return new ResponseEntity<>(vulnerabilityScriptService.getScripts(), HttpStatus.OK);
    }

    /**
     * Get a vulnerability script by script id
     * @param id
     * @return
     */
    @RequestMapping(value = "/vulnerability-scripts/{id}", method = RequestMethod.GET,
            produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ResponseEntity<VulnerabilityScript> getScriptById(@PathVariable("id") String id) {
        Integer scriptId = Integer.parseInt(id);
        return new ResponseEntity<>(vulnerabilityScriptService.getScriptById(scriptId), HttpStatus.OK);
    }

    /**
     * Delete a vulnerability script by script id
     * @param id
     * @return
     */
    @RequestMapping(value = "/vulnerability-scripts/{id}", method = RequestMethod.DELETE)
    public ResponseEntity<Void> deleteScriptById(@PathVariable("id") String id) {
        Integer scriptId = Integer.parseInt(id);
        vulnerabilityScriptService.deleteScriptById(scriptId);
        return new ResponseEntity<>(HttpStatus.OK);
    }

    /**
     * Delete all vulnerability scripts
     * @return
     */
    @RequestMapping(value = "/vulnerability-scripts", method = RequestMethod.DELETE)
    public ResponseEntity<Void> deleteAllScripts() {
        vulnerabilityScriptService.deleteAllScripts();
        return new ResponseEntity<>(HttpStatus.OK);
    }

    /**
     * Get an execution plan.
     * Throws exception if execution plan is not possible with the given set of dependencies
     * @return
     */
    @RequestMapping(value = "/execution-plan", method = RequestMethod.GET,
            produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ResponseEntity<ExecutionPlan> getExecutionPlan() throws ExecutionPlanException {
        return new ResponseEntity<>(vulnerabilityScriptService.getExecutionPlan(), HttpStatus.OK);
    }

}
