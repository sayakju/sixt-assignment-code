package com.sixt.platform.interview.service;

import com.sixt.platform.interview.model.ExecutionPlan;
import com.sixt.platform.interview.model.VulnerabilityScript;
import com.sixt.platform.interview.model.exception.ExecutionPlanException;
import com.sixt.platform.interview.repository.VulnerabilityScriptRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

/**
 * Created by sghosh8 on 9/3/17.
 */

@Service
public class VulnerabilityScriptService {

    @Autowired
    private VulnerabilityScriptRepository vulnerabilityScriptRepository;

    public VulnerabilityScript addScript(VulnerabilityScript vulnerabilityScript) {
        return vulnerabilityScriptRepository.save(vulnerabilityScript);
    }

    public List<VulnerabilityScript> getScripts() {
        return vulnerabilityScriptRepository.findAll();
    }

    public VulnerabilityScript getScriptById(int scriptId) {
        return vulnerabilityScriptRepository.findByScriptId(scriptId);
    }

    public void deleteScriptById(int scriptId) {
        vulnerabilityScriptRepository.delete(vulnerabilityScriptRepository.findByScriptId(scriptId));
    }

    public void deleteAllScripts() {
        vulnerabilityScriptRepository.deleteAll();
    }

    /**
     * Get an execution plan from the scripts stored in database
     * @return
     * @throws ExecutionPlanException
     */
    public ExecutionPlan getExecutionPlan() throws ExecutionPlanException {
        List<Integer> orderedScriptIds = new ArrayList<>();
        List<VulnerabilityScript> vulnerabilityScripts = vulnerabilityScriptRepository.findAll();
        int visitedNodeCount = 0;
        Map<Integer, List<Integer>> adjacencyMap = new HashMap<>();
        Map<Integer, Integer> inDegreeMap = new HashMap<>();
        for (VulnerabilityScript vulnerabilityScript : vulnerabilityScripts) {
            inDegreeMap.put(vulnerabilityScript.getScriptId(), vulnerabilityScript.getDependencies().size());
            for (int j = 0; j < vulnerabilityScript.getDependencies().size(); j++) {
                List<Integer> adjacencyList = adjacencyMap.get(vulnerabilityScript.getDependencies().get(j));
                if (adjacencyList == null) {
                    adjacencyList = new ArrayList<>();
                }
                adjacencyList.add(vulnerabilityScript.getScriptId());
                adjacencyMap.put(vulnerabilityScript.getDependencies().get(j), adjacencyList);
            }
        }
        Queue<Integer> queue = inDegreeMap.entrySet().stream().filter(entry -> entry.getValue() == 0).map(Map.Entry::getKey).collect(Collectors.toCollection(LinkedList::new));
        while(!queue.isEmpty()){
            Integer scriptId = queue.remove();
            orderedScriptIds.add(scriptId);
            List<Integer> adjacencyList = adjacencyMap.get(scriptId);
            visitedNodeCount++;
            if(adjacencyList != null){
                for (Integer adjacentItem : adjacencyList) {
                    Integer inDegreeCount = inDegreeMap.get(adjacentItem);
                    inDegreeMap.put(adjacentItem, inDegreeCount - 1);
                    if(inDegreeCount == 1){
                        queue.add(adjacentItem);
                    }
                }
            }
        }
        if(visitedNodeCount != vulnerabilityScripts.size()){
            throw new ExecutionPlanException("Execution plan is not possible with current script dependencies!");
        }
        return new ExecutionPlan(orderedScriptIds);
    }
}
