package com.sixt.platform.interview.controller;


import com.sixt.platform.interview.model.ExecutionPlan;
import com.sixt.platform.interview.model.VulnerabilityScript;
import com.sixt.platform.interview.service.VulnerabilityScriptService;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.web.servlet.View;

import java.util.ArrayList;
import java.util.Arrays;

import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.setup.MockMvcBuilders.standaloneSetup;

@RunWith(MockitoJUnitRunner.class)
public class VulnerabilityScriptControllerTest {
    @InjectMocks
    VulnerabilityScriptController vulnerabilityScriptController;

    @Mock
    private VulnerabilityScriptService vulnerabilityScriptService;

    @Mock
    View mockView;

    MockMvc mockMvc;

    VulnerabilityScript vulnerabilityScript = new VulnerabilityScript(1, new ArrayList<>(Arrays.asList(2, 3)));

    @Before
    public void setup() throws Exception {
        MockitoAnnotations.initMocks(this);
        mockMvc = standaloneSetup(vulnerabilityScriptController)
                .setSingleView(mockView)
                .build();

        when(vulnerabilityScriptService.addScript(any(VulnerabilityScript.class))).thenReturn(vulnerabilityScript);
        when(vulnerabilityScriptService.getScripts()).thenReturn(new ArrayList<>(Arrays.asList(vulnerabilityScript)));
        when(vulnerabilityScriptService.getScriptById(anyInt())).thenReturn(vulnerabilityScript);
        ExecutionPlan executionPlan = new ExecutionPlan(new ArrayList<>(Arrays.asList(1, 2)));
        when(vulnerabilityScriptService.getExecutionPlan()).thenReturn(executionPlan);
    }

    @Test()
    public void testAddScript() throws Exception {
        mockMvc.perform(post("/vulnerability-scripts")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"scriptId\": 1, \"dependencies\" : [2, 3]}"))
                .andExpect(status().isAccepted())
                .andExpect(content().json("{\"scriptId\": 1, \"dependencies\" : [2, 3]}"));

    }

    @Test()
    public void getScripts() throws Exception {
        mockMvc.perform(get("/vulnerability-scripts"))
                .andExpect(status().isOk())
                .andExpect(content().json("[{\"scriptId\": 1, \"dependencies\" : [2, 3]}]"));

    }

    @Test()
    public void getScriptById() throws Exception {
        mockMvc.perform(get("/vulnerability-scripts/1"))
                .andExpect(status().isOk())
                .andExpect(content().json("{\"scriptId\": 1, \"dependencies\" : [2, 3]}"));

    }

    @Test()
    public void getExecutionPlan() throws Exception {
        mockMvc.perform(get("/execution-plan"))
                .andExpect(status().isOk())
                .andExpect(content().json("{\"executionOrder\": [1, 2]}"));

    }
}