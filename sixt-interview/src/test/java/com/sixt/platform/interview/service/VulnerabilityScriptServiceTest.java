package com.sixt.platform.interview.service;

import com.sixt.platform.interview.model.VulnerabilityScript;
import com.sixt.platform.interview.model.exception.ExecutionPlanException;
import com.sixt.platform.interview.repository.VulnerabilityScriptRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.util.ArrayList;
import java.util.Arrays;

import static org.mockito.Matchers.anyInt;
import static org.mockito.Mockito.when;
import static org.junit.Assert.assertEquals;

@RunWith(SpringJUnit4ClassRunner.class)
public class VulnerabilityScriptServiceTest {

    @InjectMocks
    VulnerabilityScriptService vulnerabilityScriptService;

    @Mock
    VulnerabilityScriptRepository vulnerabilityScriptRepository;

    VulnerabilityScript vulnerabilityScript1 = new VulnerabilityScript(1, new ArrayList<>());
    VulnerabilityScript vulnerabilityScript2 = new VulnerabilityScript(2, new ArrayList<>());
    VulnerabilityScript vulnerabilityScript3 = new VulnerabilityScript(3, new ArrayList<>(Arrays.asList(1, 2)));
    VulnerabilityScript vulnerabilityScript4 = new VulnerabilityScript(4, new ArrayList<>(Arrays.asList(3)));
    VulnerabilityScript vulnerabilityScript5 = new VulnerabilityScript(5, new ArrayList<>(Arrays.asList(3)));

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        when(vulnerabilityScriptRepository.findByScriptId(anyInt())).thenReturn(vulnerabilityScript3);
        when(vulnerabilityScriptRepository.findAll()).thenReturn(new ArrayList<>(Arrays.asList(vulnerabilityScript1, vulnerabilityScript2, vulnerabilityScript3, vulnerabilityScript4, vulnerabilityScript5)));
    }

    @Test
    public void testGetScriptById() {
        assertEquals(vulnerabilityScript3, vulnerabilityScriptService.getScriptById(3));
    }

    @Test
    public void testGetScripts() {
        assertEquals(5, vulnerabilityScriptService.getScripts().size());
    }

    @Test
    public void testGetExecutionPlan() throws ExecutionPlanException {
        assertEquals(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5)), vulnerabilityScriptService.getExecutionPlan().getExecutionOrder());
    }

}
